---
alwaysApply: true
---

# Git-Commit und Release-Management Regel

## Grundprinzipien
- **Proaktive Vorschl√§ge**: Der Agent soll selbst√§ndig erkennen, wann Code-√Ñnderungen committet oder released werden sollten
- **Qualit√§tssicherung**: Nur funktionierender, getesteter Code wird f√ºr Commits/Releases vorgeschlagen
- **Transparente Kommunikation**: Jeder Vorschlag wird mit klarer Begr√ºndung und Auswirkungsanalyse pr√§sentiert

## Commit-Vorschl√§ge

### Wann ein Commit vorgeschlagen werden soll:
1. **Feature-Abschluss**: Ein neues Feature vollst√§ndig implementiert und getestet
2. **Bugfix-Abschluss**: Ein Bug behoben und durch Tests verifiziert
3. **Refaktorierung**: Code-Qualit√§t verbessert ohne Funktionalit√§ts√§nderung
4. **Dokumentation**: Wichtige Dokumentation hinzugef√ºgt oder aktualisiert
5. **Konfiguration**: Build-Scripts, Dependencies oder Projekt-Konfiguration ge√§ndert
6. **Test-Abdeckung**: Neue Tests hinzugef√ºgt oder bestehende verbessert

### Commit-Kriterien:
- Alle Tests bestehen (pytest erfolgreich)
- Keine Linter-Fehler vorhanden
- Code ist funktional und getestet
- √Ñnderungen sind logisch zusammengeh√∂rig
- Commit-Message folgt Conventional Commits Format

### Commit-Message Format:
```
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

Beispiele:
- `feat(billing): add PDF invoice generation`
- `fix(excel): resolve parsing error for empty cells`
- `docs: update API documentation`
- `test(models): add unit tests for Eigentuemer class`

## Release-Vorschl√§ge

### Wann ein Release vorgeschlagen werden soll:
1. **Major Release (v2.0.0)**: Breaking changes oder fundamentale Architektur-√Ñnderungen
2. **Minor Release (v1.1.0)**: Neue Features, die r√ºckw√§rtskompatibel sind
3. **Patch Release (v1.0.1)**: Bugfixes oder kleine Verbesserungen

### Release-Kriterien:
- Alle Tests bestehen
- Dokumentation ist aktuell
- Keine bekannten kritischen Bugs
- Changelog ist aktualisiert
- Version ist in setup.py/requirements.txt angepasst

### Release-Prozess:
1. **Version bump** in relevanten Dateien
2. **Changelog erstellen** mit √Ñnderungen seit letztem Release
3. **Git tag** mit Versionsnummer erstellen
4. **Release notes** mit Features/Bugfixes schreiben

## Automatische Erkennung

### Code-Analyse:
- √úberwache √Ñnderungen in `src/` f√ºr Feature-Entwicklung
- Erkenne Test-√Ñnderungen in `tests/`
- Pr√ºfe Dokumentation-√Ñnderungen in `*.md` Dateien
- Analysiere Build-Konfiguration in `setup.py`, `requirements.txt`

### Qualit√§tspr√ºfung:
- F√ºhre `pytest` aus vor Commit-Vorschl√§gen
- Pr√ºfe Linter-Status mit `flake8`/`black`
- Validiere Import-Struktur
- Teste kritische Funktionalit√§ten

## Vorschlags-Format

### F√ºr Commits:
```
üîÑ COMMIT VORSCHLAG
√Ñnderungen: [Beschreibung der √Ñnderungen]
Tests: ‚úÖ Bestanden / ‚ùå Fehlgeschlagen
Linter: ‚úÖ OK / ‚ùå Fehler
Begr√ºndung: [Warum dieser Commit sinnvoll ist]
Commit-Message: [Vorgeschlagene Message]
```

### F√ºr Releases:
```
üöÄ RELEASE VORSCHLAG
Version: [Neue Versionsnummer]
Typ: Major/Minor/Patch
√Ñnderungen seit letztem Release:
- [Feature 1]
- [Bugfix 1]
- [Verbesserung 1]
Tests: ‚úÖ Bestanden
Dokumentation: ‚úÖ Aktuell
Begr√ºndung: [Warum ein Release jetzt sinnvoll ist]
```

## Ausf√ºhrungsbefehle

### Commit-Befehle:
```bash
git add .
git commit -m "[Commit-Message]"
git push origin main
```

### Release-Befehle:
```bash
# Version bump (manuell in setup.py)
git add .
git commit -m "chore: bump version to [version]"
git tag [version]
git push origin main --tags
```

## Ausnahmen und Warnungen

### Kein Commit/Release bei:
- Unvollst√§ndigen Features
- Fehlgeschlagenen Tests
- Linter-Fehlern
- Ungetestetem Code
- Breaking Changes ohne Dokumentation

### Warnung bei:
- Gro√üen √Ñnderungen ohne ausreichende Tests
- √Ñnderungen an kritischen Systemen
- Dependencies-Updates
- Konfigurations√§nderungen

## Implementierung
- Pr√ºfe nach jeder Code-√Ñnderung automatisch Commit-Bedarf
- Analysiere Projekt-Status vor Release-Vorschl√§gen
- Stelle sicher, dass alle Qualit√§tskriterien erf√ºllt sind
- Kommuniziere Vorschl√§ge klar und mit Begr√ºndung
